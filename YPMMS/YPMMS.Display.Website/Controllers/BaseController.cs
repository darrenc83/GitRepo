using System.Net;
using System.Web.Mvc;
using YPMMS.Display.Utilities;
using Newtonsoft.Json;
using NLog;

namespace YPMMS.Display.Website.Controllers
{
    /// <summary>
    /// Base controller for all controllers in this project.
    /// Controllers MUST derive from this and not <see cref="Controller"/>.
    /// </summary>
    public abstract class BaseController : Controller
    {
        /// <summary>
        /// Log property to be used by all derived classes, following the pattern
        /// described at https://github.com/nlog/nlog/wiki/Tutorial#expose-logger-to-sub-classes
        /// </summary>
        protected Logger Log { get; private set; }

        protected BaseController()
        {
            Log = LogManager.GetLogger(GetType().FullName);
        }

        /// <summary>
        /// Customised <see cref="JsonResult"/> class to ensure that JSON data generated by the Json()
        /// method is serialised as per our default settings.
        /// Based on this: http://stackoverflow.com/questions/17244774/proper-json-serialization-in-mvc-4/17245644#17245644
        /// </summary>
        private class CustomJsonResult : JsonResult
        {
            public override void ExecuteResult(ControllerContext context)
            {
                if (Data == null)
                {
                    return;
                }

                var response = context.HttpContext.Response;

                response.ContentType = "application/json";

                if (ContentEncoding != null)
                {
                    response.ContentEncoding = ContentEncoding;
                }

                response.Write(JsonConvert.SerializeObject(Data, Consts.JsonSettings));
            }
        }

        /// <summary>
        /// Return a JSON object serialised with our default settings
        /// </summary>
        /// <param name="data"></param>
        /// <returns></returns>
        protected new JsonResult Json(object data)
        {
            return new CustomJsonResult
            {
                Data = data,
                JsonRequestBehavior = JsonRequestBehavior.AllowGet
            };
        }

        /// <summary>
        /// Simple utility method to return a 200 OK response
        /// </summary>
        /// <returns></returns>
        protected ActionResult Ok()
        {
            return new HttpStatusCodeResult(HttpStatusCode.OK);
        }

        /// <summary>
        /// Simple utility method to return a 500 Internal Server error response
        /// </summary>
        /// <returns></returns>
        protected ActionResult InternalServerError()
        {
            return new HttpStatusCodeResult(HttpStatusCode.InternalServerError);
        }
    }
}